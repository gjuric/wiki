====== Debian ======

  *[[hr:Debian:Instalacija Instalacija Debiana]]
  *[[hr:Debian:Backup Backup servera]]
  *[[hr:Debian:NTP Sinkronizacija vremena (NTP)]]
  *[[hr:Debian:DNS DNS (BIND 9)]]
  *[[hr:Debian:LAMP LAMP]]
  *[[hr:Debian:Verlihub DC hub (Verlihub)]]
  *[[hr:Debian:Jabber Jabber (Openfire)]]
  *[[hr:Debian:Teamspeak2 TeamSpeak2]]
  *[[hr:Debian:Ventrilo Ventrilo]]
  *[[hr:Debian:VoIP VoIP (OpenSER)]]
  *[[hr:Debian:WindowsFileSharing Windows File Sharing]] (Samba)
  *[[hr:Debian:DcFileSharing DC file sharing]] (microdc2)
  *[[hr:Debian:DynDNS DynDNS]]

===== Instalacija Debiana =====

Na http://www.debian.org/distrib/netinst skinite Small CD (recimo ovaj od 180 (možete i od 40MB nije toliko bitno). Prilikom skidanja potrebno je odabrati arhitekturu, u vašem slučaju to je vjerojatno i386.

Skinuti .iso image snimite na CD i pokrenite stroj sa dotičnog CD-a.

Nakon što se prikaže prozor za instalaciju dovoljno je upisati "install" i stisnuti enter. Ukoliko imate DHCP uključen na mreži upišite "install netcfg/disable_dhcp=true" kako instalacija ne bi pokupila postavke od DHCP servera tako da možete upisati statičku IP adresu i ostale podatke (serveri bi trebali imati statičku IP adresu, a i ne ovisite o radu DHCP servera).

Prilikom instalacije bit će vam postavljeno više jednostavnih pitanja, evo nekih koje se sjećam:

  *  Jezik instalacije - odaberite Engleski
  *  Zemlja - Croatia
  *  Keymap - Croatian
  *  Particioniranje diska - particionirajte čitav disk, instalacija će vam sama ponuditi postavke
  *  Software selection - obavezno isključite sve (i Standard system, apsolutno sve), naknadno ćemo instalirati sve programe koji su nam potrebni
  *  Mirror server - obavezno unesite mirror server, ja obično koristim Germany -> ftp2.de.debian.org jer je meni brži od ovog hrvatskog
Morat ćete još unijeti i lozinku za root korisnika te kreirati jedan korisnički račun. Na kraju će vas instalacija zamoliti da uklonite CD i potvrdite resetiranje računala.


====  Prvi boot ===

Nakon što se server podigne ulogirajte se kao root korisnik sa lozinkom koju ste unijeli prilikom instalacije.

Editirajte datoteku /etc/apt/sources.lst:

  nano /etc/apt/sources.list

Zakomentirajte liniju koja počinje s "deb cdrom: [ [Debian ..." upisivanjem znaka # na početku linije, spremite promjene (ctrl+X i potvrdite da želite spremiti datoteku pod istim imenom).

Kada se vratite u prompt upišite:

  apt-get update
  apt-get upgrade

Potvrdite da želite instalirati pakete koje će vam možda ponuditi. Prva naredba dohvaća najnovije verzije paketa u repozitoriju, a druga naredba upgrade-a sve pakete za koje postoji nova verzija.

Vrijeme je za instalacije openssh servera koji će nam omogućiti spajanje na stroj putem SSH-a, usput ćemo instalirati i SSH kako bi mogli server koristiti za spajanje na druga računala.

  apt-get install openssh-server ssh

Nakon ovog koraka, nema više potrebe da prekucavate sve ove naredbe kada ih možete copy-pasteati :). Možete se sjesti za svoje računalo i pomoću [[http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html|Putty]]-a spojiti se na svoj novo-instalirani server. Korisničko ime (root), lozinku i IP adresu već znate.

==== Početno podešavanje sata===

Podesimo prvo datum i vrijeme:

  date -s 2008-02-13
  date -s 01:06:00

Zapišimo trenutno vrijeme u harderski sat:

  hwclock --systohc

Debian prilikom svakog gašenja računala zapisuje sistemski sat u hardverski. Naredba **date** ispisuje trenutni datumi vrijeme, te vremensku zonu. Ukoliko vremensku zonu niste dobro podesili prilikom instalacije možete ju promijeniti sa naredbom **tzconfig**.

===== Backup servera==

Backup glavu čuva. Kako bi backupirali sve podatke iz baze podataka i sa sistema na udaljeni server (putem FTP-a), bit će nam potreban **ncftp** - FTP klijent kojeg ćemo instalirati na računalo koje želimo backupirati, te FTP server na računalu na koje želimo pohraniti backup.

Instlirajmo ncftp na računalo koje backupiramo:

  apt-get install ncftp

Instalirajmo FTP server na računalu na kojem ćemo čuvati backup:

  apt-get install proftpd

Na pitanje želite li standalone server odgovorite potvrdno. Zatom na tom istom računalu (gdje ćemo čuvati backup) kreirajte korisnika i direktorij u koji želite pohraniti backup. Sada smo gotovi s radom na računalu na kojem držimo backup i možemo se vratiti na server koji želimo backupirati.

Posjetite http://bash.cyberciti.biz/backup/wizard-ftp-script.php i unesite podatke u formu (ja backupiram direktorije /etc /var/www i /home). Izgeneriranu skriptu pohranite u recimo /root/backup.sh te učinite dotičnu dadoteku izvršnom:

  chmod +x /root/backup.sh

I za kraj, podesite da se skripta pokreće svakodnevno, kod mene se pokreće svaki dan u 04:23 ujutro, to napravite tako da upišete:

  crontab -e

I paste-ate ovu liniju:

  23 4 * * * /root/backup.sh >/dev/null 2>&1

Detalje o tome kako skripta radi možete pročitati na http://www.cyberciti.biz/tips/how-to-backup-mysql-databases-web-server-files-to-a-ftp-server-automatically.html

===== Sinkronizacija vremena (NTP)==

Kako bi naš server uvijek imao točno vrijeme instalirat ćemo NTP deamon.

  apt-get install ntp

U ranijim verzijama Debiana (Sarge) bilo je više paketa koji su se bavili NTP-om. Na Etchu, koji koristimo u ovim uputama, su oni objedinjeni u jedan paket - **ntp**. **ntpdate** je isto zastario (služi za jednokratno naštimavanje vremena) i preporučam da ga ne instaliravate, pokretanje deamona s opcijom -g je zamijenilo ntpdate.

Debianom ntp paket dolazi već sa nekim preddefiniranim NTP serverima (stratum 2), njih ćemo zamijeniti Carnetovim NTP serverima. Editirajte /etc/ntp.conf

  nano /etc/ntp.conf

Zamijenite

  server 0.debian.pool.ntp.org iburst
  server 1.debian.pool.ntp.org iburst
  server 2.debian.pool.ntp.org iburst
  server 3.debian.pool.ntp.org iburst

sa

  server zg1.ntp.carnet.hr
  server zg2.ntp.carnet.hr
  server st.ntp.carnet.hr
  server ri.ntp.carnet.hr
  server os.ntp.carnet.hr

Ponovno pokrenite ntp deamon:

  invoke-rc.d ntp restart

Status ntp-a možete provjeriti sa **ntpq -p**, ovo je primjer ispisa:

  grunf:~# ntpq -p
       remote           refid      st t when poll reach   delay   offset  jitter
  ==============================================================================
   zg1.ntp.CARNet. 161.53.1.2       2 u   58   64    3    7.157  106.619   4.158
   zg2.ntp.CARNet. 161.53.1.2       2 u   57   64    3    7.677   25.934   4.792
   duje.st.carnet. 161.53.1.2       2 u   58   64    3   12.030   21.932   6.873
   morcic.RI.CARNe 161.53.1.2       2 u   58   64    3   11.796   26.527   7.751
   po.os.carnet.hr 161.53.1.2       2 u   56   64    3   11.923   21.056   5.070

Nakon nekog vremena polje reach bi trebalo biti veće od 0, što znači da je deamon sinkroniziran sa ostalim NTP serverima.

Na drugim routerima i serverima u mreži ćete umjeto popisa Carnetovih NTP servera unijeti samo adresu servera koje ste upravo podesili. Windowse sada također možete sinkronizirati sa svojim serverom, dva puta kliknite na sat u tray-u, odaberite tab **Internet Time** i umjesto time.windows.com unesite adresu svog servera.

===== DNS (BIND 9)==

Za DNS server ćemo instalirati BIND 9, najrašireniji DNS server na internetu. Nakon što ga podesimo DNS server će resolvati domenu savica.net, forwardirati zajhtjeve za ostalim internim domenama prema nadležnim DNS poslužiteljima, te resolvati domene na internetu.

  apt-get install bind9 dnsutils

==== Caching name server===

DNS server ćemo podesiti tako da zna resolvati sve domene na internetu, a resolvane zapise ujedno čuva i u svom cache-u. Otvorite **/etc/bind/named.conf** i provjerite da unutra imate ovaj dio:

  // prime the server with knowledge of the root servers
  zone "." {
          type hint;
          file "/etc/bind/db.root";
  };

Time smo DNS serveru dali do znanja da za sve domene pogleda popis root servera koji se nalazi u datoteci **/etc/bind/db.root** i pošalje jednom od njih upit.

Proverite još samo da na kraju imate liniju koja include-a naše lokalne opcije na kraju datoteke

  include "/etc/bind/named.conf.local";

Provjerimo radi li naš DNS server:

<code>grunf:~# nslookup google.com
Server:         127.0.0.1
Address:        127.0.0.1#53

Non-authoritative answer:
Name:   google.com
Address: 64.233.167.99
Name:   google.com
Address: 64.233.187.99
Name:   google.com
Address: 72.14.207.99</code>

==== State Of Authority===

DNS server će biti glavni DNS server za domenu savica.net. Otvorimo datoteku **/etc/bind/named.conf.local**

  nano /etc/bind/named.conf.local

i dodajmo slijedeće:

  zone "savica.net" {
          type master;
          file "/etc/bind/zones/savica.net";
  };
  zone "0.29.10.in-addr.arpa" {
          type master;
          file "/etc/bind/zones/10.29.0.rev";
  };


Kreirajmo prvo direktorij /etc/bind/zones

  mkdir /etc/bind/zones

I kreirajmo u njemu datoteku **savica.net**:

  nano /etc/bind/zones/savica.net

Upišimo odmah i par DNS zapisa:

<code>$ORIGIN .
$TTL 300      ; 5 minutes
savica.net              IN SOA  ns1.savica.net. gog.savica.net. (
                                20080213   ; serial
                                300        ; refresh (5 minutes)
                                600        ; retry (10 minutes)
                                1209600    ; expire (2 weeks)
                                10800      ; minimum (3 hours)
                                )
                        NS      ns1.savica.net.
                        NS      ns2.savica.net.
$ORIGIN savica.net.
grunf                   A       10.29.0.2
grunf2                  A       10.29.3.1

ns1                     CNAME   grunf
dc                      CNAME   grunf
jabber                  CNAME   grunf
voip                    CNAME   grunf
ntp                     CNAME   grunf
ts                      CNAME   grunf
teamspeak               CNAME   grunf
ventrilo                CNAME   grunf
ns2                     CNAME   grunf2</code>

Kreirajmo zatim **10.29.0.rev** datoteku:

  nano /etc/bind/zones/10.29.0.rev

I upišimo u nju PTR record barem za računalo koje je i DNS server (u ovom slučaju 10.29.0.2):

<code>
$ORIGIN .
$TTL 300      ; 5 minutes
0.29.10.in-addr.arpa    IN SOA  ns1.savica.net. hostmaster.savica.net. (
                                200802141  ; serial
                                7200       ; refresh (2 hours)
                                900        ; retry (15 minutes)
                                1209600    ; expire (2 weeks)
                                10800      ; minimum (3 hours)
                                )
                        NS      ns1.savica.net.
                        NS      ns2.savica.net.
$ORIGIN 0.29.10.in-addr.arpa.
2                       PTR     grunf.savica.net.</code>


Dodajmo u /etc/resolv.conf i localhost (127.0.0.1), moja datoteka sada izgleda ovako:

  search savica.net
  nameserver 127.0.0.1
  nameserver 10.29.3.1

**10.29.3.1** je sekundarni DNS server koji ćemo podesiti kasnije. Redoslijed ovih nameservera odlučuje o redoslijedu kako će server resolvati domene, s obzirom da smo na njemu podesili DNS server želimo da prvo "sebe pita" za svaku domenu. Ukoliko se slučajno DNS servis ugasi, upit će biti prosljeđen sekundardnom serveru (10.29.3.1).

Reloadajmo BIND i provjerimo radi li DNS server:

  invoke-rc.d bind9 reload

<code>grunf:~# nslookup ns1.savica.net
Server:         127.0.0.1
Address:        127.0.0.1#53

ns1.savica.net  canonical name = grunf.savica.net.
Name:   grunf.savica.net
Address: 10.29.0.2</code>


==== Forward zahtijeva===

Kreirajmo prvo forward.conf datoteku, u njoj su smešteni dns-serveri na koje prosljeđujemo upite za domenama drugih mreža.

  nano /etc/bind/forward.conf

U nju unesite sve prijateljske mreže s kojima ste spojeni i čije DNS-ove znate:

<code>zone "wifihr." {
        type forward;
        forwarders { 10.14.16.1 ; 10.14.7.1 ; };
};
zone "14.10.in-addr.arpa" {
        type forward;
        forwarders { 10.14.16.1 ; 10.14.7.1 ; };
};

zone "dw." {
        type forward;
        forwarders { 10.29.1.251 ; };
};

zone "vb-vgw." {
        type forward;
        forwarders { 10.60.0.100 ; };
};

zone "vgw." {
        type forward;
        forwarders { 10.20.1.2 ; 10.20.3.1 ; };
};

zone "zgw." {
        type forward;
        forwarders { 10.5.142.32 ; 10.5.131.33 ; };
};

zone "znet." {
        type forward;
        forwarders { 10.168.4.2 ; 10.168.52.2 ; };
};

zone "vrw." {
        type forward;
        forwarders { 10.125.0.51 ; 10.14.7.1 ; };
};
</code>

Na kraju datoteke **/etc/bind/named.conf.local** dadajte liniju:

  include "/etc/bind/forward.conf";

Reloadajmo BIND još jednom i provjerimo možemo li resolvati neku od forwardiranih domena, u mom slučaju je to .wifihr

  invoke-rc.d bind9 reload

<code>grunf:~# nslookup jabber.wifihr
Server:         127.0.0.1
Address:        127.0.0.1#53

Non-authoritative answer:
Name:   jabber.wifihr
Address: 10.14.16.2</code>

=====  LAMP ==

U ovom koraku instalirat ćemo web poslužitelje Apache, skriptni jezik PHP i bazu podataka MySQL. 


==== MySQL===

Krenimo prvo s MySQL-om:

  apt-get install mysql-server mysql-client libmysqlclient15-dev

Potvrdite instalaciju i strpite se dok se ne skine otprilike 55MB i instalacija ne dovrši. Iako defaultno na Debianu MySQL "sluša" samo na localhost-u, kako bi spriječili zlouporabu od druhih korisnika koji možda imaju korisnički račun na serveru, podesit ćemo lozinku za root korisnika u bazi podataka:

  mysqladmin -u root password vasa-lozinka-za-root-korisnika

Kao što postoje korisnički računi za čitav server, tako postoje i korisnički računi za MySQL koje je potrebno dodatno podesiti.

==== Apache===

Unesite u terminal:

  apt-get install apache2 apache2-doc apache2-mpm-prefork apache2-utils libexpat1 ssl-cert


==== PHP===

Unesite u terminal (tekst je ovdje razlomljen zbog prikaza, morate ga paste-ati u jednom komadu):

  apt-get install libapache2-mod-php5 php5 php5-common php5-curl php5-dev php5-gd \
  php5-idn php-pear php5-imagick php5-imap php5-json php5-mcrypt php5-memcache \
  php5-mhash php5-ming php5-mysql php5-ps php5-pspell php5-recode php5-snmp \
  php5-sqlite php5-tidy php5-xmlrpc php5-xsl

Na pitanje: Continue installing libc-client without Maildir support?  odgovorite potvrdno (defaultna opcija)

I to je to, upravo ste instalirali svoj web server. Stranice smještate u **/var/www/apache2-default/** , a ukoliko svoj internet preglednik uputite na adresu servera trebala bi vas dočekati poruka "**It works!**".

Za podešavanje dodatnih domena koje će web server posluživati ću vas uputiti na dokumentaciju i vašu snalažljivost. Ovdje ću samo napomenuti da Debian ima zgodne utility-je **a2enmod**, **a2dismod**, **a2ensite**, **a2dissite** koji će vam pomoći prilikom uključivanja Apache modula i posluživanja dodatnih domena. Što i kako dalje je na vama, ukoliko vam je potrebno.

=====  DC hub (Verlihub) ==

==== Instalacija potrebnih biblioteka i programa===
Ukoliko koristite Ubuntu okušajte sreću da malo niše opisanim postupkon, no on na Debianu ne radi, stoga ćemo morati ručno. Verlihub zahtijeva GeoIP, Libpcre i MySQL, s obzirom da smo MySQL već instalirali preostaje nam još:

  apt-get install libgeoip1 libgeoip-dev
  apt-get install libpcre3 libpcre3-dev

Kako bi mogli kompajlirati programe na Debianu potreban nam je naravno kompajler :) ali i još par utility-a, pa ajmo ih instalirati:

  apt-get install build-essential

==== Kompajliranje===

Skinimo Verlihub:

  wget http://downloads.sourceforge.net/verlihub/verlihub-0.9.8d-RC2.tar.gz

Raspakirajmo arhivu:

  tar -xvzzf verlihub-0.9.8d-RC2.tar.gz

Uđimo u novokreirani direktorij:

  cd verlihub

Komapajliranje se obično svodi na ./configure make make install, pa tako i ovdje:

Unesite:

  ./configure

Nakon nekog vremena trebala bi vas dočekati poruka: "Configure has completed successfully........"

Zatim unesite:

  make

Sada slijedi još malo dosadnog čekanja koje sam ja iskoristio za pisane ovog tutoriala :) Koliko ćete čekati ovisi o brzini servera.

Nakon kompajliranja potrebno je verlihub i instalirati:

  make install

==== Podešavanje MySQL-a===

Prije nego što pokrenemo konfiguraciju Verlihub-a potrebno je prvo kreirati bazu podataka koju će Verlihub koristiti:

  mysqladmin -u root -p create verlihub

Morat ćete unijet lozinku root korisnika MySQL-a, koja ne mora biti nužno jednaka lozinci root korisnika na računal. Dotičnu lozinku ste postavili prilikom instalacije MySQL-a.

Kreirajmo sada korisnika koji će imati sva prava nad bazom "verlihub". Verlihub će se na bazu spajati kao dotični korisnik. Spojimo se prvo na MySQL:

  mysql -u root -p

Nakon što unesete lozinku, trebali bi vidjeti prompt "**mysql>**", unesite:

  GRANT ALL PRIVILEGES ON verlihub.* TO 'verlihub'@'localhost' IDENTIFIED BY 'verlihub-lozinka';

Ukoliko je naredba usješno izvedena trebali bi vidjeti: "**Query OK, 0 rows affected**". Izađite iz MySQL-a tako da upišete "**exit**". "verlihub-lozinka" je proizvoljna lozinka koju će Verlihub koristiti za spajanje na bazu.

==== Instalacijska skripta===

Nakon što smo pripremili bazu podataka vrijeme je za pokretanje Verlihubove instalacijske skripte. Potražimo prvo gdje se Verlihub-ova instalacijska skripta smjestila:

  updatedb
  locate vh_install | grep bin

**/usr/local/bin** je dakle mjesto gdje se nalazi skripta, pa pokrenimo ju:

  /usr/local/bin/vh_install

Popunite tražene podatke:

<code>
grunf:~/verlihub# /usr/local/bin/vh_install
--------------------------------
Your name ? (root)

Hello root,
let's start with configuration of database access..

--------------------------------
mysql database for verlihub will be called? (verlihub)
mysql user to access verlihub gonna be? (verlihub)
password to access verlihub be? (1202872483) verlihub-lozinka
mysql server will run where? (localhost)
--------------------------------
user     = verlihub
password = verlihub-lozinka
host     = localhost
database = verlihub
--------------------------------
This database account exists
--------------------------------
Is this info correct ? (Y/N)Y

--------------------------------

root, you need to choos a place for the configuration files
--------------------------------
The order of folder that verlihub is looking for is following:

1 - variable $VERLIHUB_CFG          - -inexisting-
2 - ./.verlihub                      - /root/verlihub/.verlihub -inexisting-
3 - /root/.verlihub        - /root/.verlihub -inexisting-
4 - /usr/local/etc/verlihub   - /usr/local/etc/verlihub -inexisting-
5 - /etc/verlihub                    - /etc/verlihub -inexisting-
if two or more of these exist, lower number has priority
--------------------------------

--------------------------------
what is will be the configuration folder ? (/etc/verlihub)
The config folder /etc/verlihub does not exist and would be created
--------------------------------
Do you want to continue with these settings (if not then select another folder) ? (Y/N)Y
--------------------------------
Written: /etc/verlihub/dbconfig

--------------------------------

Wait few seconds..
</code>

Prvi put kada sam pokrenuo instalacijsku skriptu ona se nakon ovog koraka zaglavila, ukoliko vam se to slučajno desi samo ju prekinite sa Ctrl+C i pokrenite ispočetka.

Ostatala instalacijska pitanja su trivijalna, potrebno je podesiti korisničko ime i lozinke za SuperUsera, port na kojem će se DC hub vrtiti (odaberite 411 jer njega DC klijenti koriste po defaultu), DNS zapis stroja na kojem se hub nalazi, npr. dc.savica.net, dc.wifihr, ...

==== Pokretanje===

Čestitamo upravo ste instalirali Verlihub. Pokrenimo ga da vidimo da li radi. Za pokretanje Verlihub-a postoji skripta imena vh_runhub koja služi za njegovo pokretanje:

  /usr/local/bib/vh_runhub

Pokušajte se spojiti sa DC klijent-om da provjerite da li sve radi. Spojite se kao SuperUser ([[SU]]root se zove ukoliko ste odabrali defaultne postavke prilikom instalacije) i možete si odmah registrirati svoje korisničke ime i dodijeliti željenu klasu.



==== Automatsko pokretanje===

Kao i sve ostale servise, vjerojatno vam je želja da se Verlihub pokreće prilikom paljenja servera, da bi to postigli potrebno je kreirati jednostavnu skriptu: **/etc/init.d/verlihub**. Na Debianu sve sve init skripte nalaze u direktoriju /etc/init.d

  nano /etc/init.d/verlihub

Copy-paste-ajte slijedeće:

<code bash>
# !/bin/sh
#  RUNAS= verlihub%%%
#  LOGFILE= /var/log/verlihub

case "$1" in
  start)

        echo -n "Starting verlihub"
        start-stop-daemon  --start --quiet --exec /usr/local/bin/vh_runhub
        echo "."
        ;;
  stop)
        echo -n "Stopping verlihub"
        start-stop-daemon --stop --quiet --oknodo --pidfile /etc/verlihub/pid
        echo "."
        ;;



  restart)
        echo -n "Restarting verlihub"
        start-stop-daemon --stop --quiet --oknodo --pidfile /etc/verlihub/pid

        sleep 3
        start-stop-daemon  --start --quiet --exec /usr/local/bin/vh_runhub





        echo "."
        ;;

  *)
        echo "Usage: /etc/init.d/verlihub {start|stop|restart}"

        exit 1
esac

exit 0
</code>

Skriptu je potrebno učiniti izvršnom, stoga:

  chmod +x /etc/init.d/verlihub

I još je samo preostalo dodati skriptu u odgovarajući runlevel, na debianu je to najjednostavnije napraviti ovako:

  update-rc.d verlihub defaults

Osim što će se Verlihub sada automatski paliti kada i server, njime možete upravljati i slijedećim naredbama:

  /etc/init.d/velihub start
  /etc/init.d/velihub stop

Što je ekvivalentno tome da ste napisali:

  invoke-rc.d verlihub start
  invoke-rc.d verlihub stop

Najbrži način je napisati "inv" pa stisnuti <tab> autocomplete će odraditi ostatak.

==== Konfiguracija===

Spojite se na hub sa korisničkim imenom [[SU]]root (ili kako ste već nazvali svog SuperUsera) i registrirajte sebe kao admina tako da u main chat upišete:

  !regnew vaš-nick 10

Nakon toga se možete spojiti sa svojim nadimkom, podesiti si lozinku i podesiti ostale parametre Verlihub-a. Upisivanjem **!gc** kao admin u main chat dobit ćete popis svih konfiguracijskih naredbi, a njihova značenja možete potražiti u [[http://www.verlihub-project.org/doku.php?id=manual|Verlihubovoj dokumentaciji]].

Evo nekih koje ne bi bilo naodmet podesiti:

  !set redir_host_max 0
  !set redir_host0 adresa-vašeg-huba
  !set send_user_info 0
  !set int_search_pas 5
  !set min_nick 2
  !set int_search 5
  !modtrigger +vh_donation -c11
  !modtrigger +admin_reminder -c11
  !modtrigger +updates -c11
  !modtrigger +news -c11

==== Ubuntu===

Ukoliko ste instalirali Ubuntu, dio o komapjliranju možete preskočiti (doduše nisam provjerio da li stvarno radi, na Debianu se buni zbog razlike u verzijama pojedinih biblioteka). No, da skratimo, otvorite datoteku **/etc/apt/sources.list**

  nano /etc/apt/sources.list

i dodajte na njen kraj:

  deb http://www.verlihub-project.org/debian binary/ 
  deb-src http://www.verlihub-project.org/debian source/ 

Nakon što ju spremite, u prompt ponovo unesite:

  apt-get update

Sada kada je repozitori dodan Verlihub možete instalirati:

  apt-get install verlihub 

Dalje se snađite sami, ili bacite oko malo više, za dovršetak instalacijske procedure,

===== Jabber (Openfire)==

==== Instalacija Jave===
Openfire Jabber server je napisan u Javi, stoga ćemo prvo morati instalirati Javu. Da bi to mogli napraviti na Debianu, potrebno je dodati non-free repozitorije. Editirajte /etc/apt/sources.lst

  nano /etc/apt/sources.list

Na kraju linija:

  deb http://ftp2.de.debian.org/debian/ etch main
  deb-src http://ftp2.de.debian.org/debian/ etch main

Treba dodati "non-free" tako da one izledaju ovako:

  deb http://ftp2.de.debian.org/debian/ etch main non-free
  deb-src http://ftp2.de.debian.org/debian/ etch main non-free

Ponovo pokrenite:

  apt-get update

Instalirajte Sun Java Runtime Environment:

  apt-get install sun-java5-jre

==== Podešavanje MySQL-a===

Iako Openfire može raditi s tekstualnom datotekom, mi ćemo ga podesiti tako da podatke čuva u bazi podataka.

Kreirajmo bazu koja se zove jabber

  mysqladmin -u root -p create jabber

Morat ćete unijet lozinku root korisnika MySQL-a, koja ne mora biti nužno jednaka lozinci root korisnika na računal. Dotičnu lozinku ste postavili prilikom instalacije MySQL-a.

Kreirajmo sada korisnika koji će imati sva prava nad bazom "jabber". Openfire će se na bazu spajati kao dotični korisnik. Spojimo se prvo na MySQL:

  mysql -u root -p

Nakon što unesete lozinku, trebali bi vidjeti prompt "mysql>", unesite:

  GRANT ALL PRIVILEGES ON jabber.* TO 'jabber'@'localhost' IDENTIFIED BY 'jabber-lozinka';

Ukoliko je naredba usješno izvedena trebali bi vidjeti: "Query OK, 0 rows affected". Izađite iz MySQL-a tako da upišete "exit". "jabber-lozinka" je proizvoljna lozinka koju će Openfire koristiti za spajanje na bazu.

==== Instalacija Openfire-a===

Službene upute za instalaciju Openfire-a na Linuxu nalaze se na http://www.igniterealtime.org/builds/openfire/docs/latest/documentation/install-guide.html

Skinite zadnju inačicu Openfire servera sa njihovih stranicu, trenutno je to verzija 3.4.5.

  wget http://www.igniterealtime.org/downloadServlet?filename=openfire/openfire_3_4_5.tar.gz

Raspakirajte arhivu:

  tar -xvzzf downloadServlet\?filename\=openfire%2Fopenfire_3_4_5.tar.gz

Preselite novonastali direktorij openfire/ u direktorij /opt

  mv openfire/ /opt

Pokrenimo Openfire:

  /opt/openfire/bin/openfire start

Nakon pokretanja Openfire-a potrebno je spojiti se s internet preglednikom na adresu http://ip-adresa-vaseg-servera:9090 . Ukoliko se ne možete spojiti iz prve, sačekajte malo, Java je spora dok se ne podigne prvi puta.

Ostatak instalacije odrađuje se iz internet preglednika:

  *  Jezik odaberite engleski
  *  Unesite domenu: npr. jabber.savica.net, jabber.wifihr, jabber.zutaferka.wifihr (ovisno o tome na kojoj domeni se nalazi server)
  *  Portove možete ostaviti standardne
  *  Za bazu odaberite:  Standard Database Connection
  *  Iz dropdown-a odaberite MySQL
  *  Database URL : jdbc : mysql : / /localhost : 3306 / jabber
  *  Username : jabber
  *  Password : jabber-password (ili koju lozinku ste već dodijelili korisniku jabber u MySQL-u)
  *  Profile setting : Default (osim ukoliko ne želite koristiti LDAP, no da to želite, ne bi niti čitali ove upute :) )
  *  Podesite e-mail i lozinku administratora

Nakon što ste završili sa instalacijom možete su ulogirati u Admin konzolu s korisničkim imenom **admin** i lozinkom koju ste maloprije podesili. I to je sve.

Ukoliko ste primijetili da ne možete ništa upisivati u svoj terminal, to je zato što server nismo pokrenuli u pozadini. Pritisnite Ctrl + C čime ćete ujedno i ugasiti server.

==== Automatsko pokretanje===

Ostaje nam još samo podesiti automatsko podizanje Jabber servera prilikom bootanja servera. Openfire već dolazi sa init skriptom, samo ju je potrebno podesit. Prekopirajte ju u /etc/init.d/ direktorij. Skripta se zove openfired, no mi ćemo ju nazvati jabber:

  cp /opt/openfire/bin/extra/openfired /etc/init.d/jabber

Učinimo ju izvršnom:

  chmod +x /etc/init.d/jabber

I dodajmo ju u defaultni runlevel:

  update-rc.d jabber defaults

Skripta očekuje da Openfire pokreće korisnik "jive" koji trenutno ne postoji na sistemu. Ajmo ga prvo kreirati i dodijelit mu home direktorij /opt/openfire .

  adduser --home /opt/openfire --disabled-login --disabled-password --no-create-home jive

Dobit ćemo upozorenje da direktorij i datoteke u direktoriju /opt/openfire ne pripadaju korisniku jive, pa ajmo to popraviti:

  chown jive:jive /opt/openfire/ -R

Skripta ima jednu grešku u sebi, stoga editirajmo /etc/init.d/jabber
 
  nano /etc/init.d/jabber

liniju 53:

          CMD="./openfire.sh $1"

treba zamijeniti sa 

          CMD="./openfire $1"

Osim što će se Openfire sada automatski paliti kada i server, njime možete upravljati i slijedećim naredbama:

  /etc/init.d/jabber start
  /etc/init.d/jabber stop

Što je ekvivalentno tome da ste napisali:

  invoke-rc.d jabber start
  invoke-rc.d jabber stop

Najbrži način je napisati "inv" pa stisnuti <tab> autocomplete će odraditi ostatak.


===== TeamSpeak2==

TeamSpeak2 je pandan Ventrilu. Servis koji omogućuje glasvonu komunikaciju između više korisnika. Najšešće se koristi prilikom igranja. Službeni paket TeamSpeak2 servera će se pojaviti tek u novoj verziji Debian (Sid), međutim autor je na zamolbu zapakirao i verziju kompatibilnu s Etch-om koji mi koristimo.

Skinimo TeamSpeak2 server s interneta:

  wget http://www.webote.com/debian/teamspeak-server_2.0.23.19-1_i386.deb

Da bi instalirali paket moramo upisati:

  dpkg -i teamspeak-server_2.0.23.19-1_i386.deb

Nakon instalacije preostaje nam još samo pokrenuti server

  invoke-rc.d teamspeak-server start

Admin sučelje dostupno je iz preglednika na adresi:

  http://ip-adresa:14534

Korisničko ime i lozinku za admin i superadmin accout možete pronaći u log datoteci od TeamSpeaka koja je smeštena u /var/log/teamspeak.log

  grunf:/var/log# cat /var/log/teamspeak-server.log | grep password
  17-02-08 19:38:33,WARNING,Info,SERVER,  admin account info: username: admin password: XXXXXX
  17-02-08 19:38:33,WARNING,Info,SERVER,  superadmin account info: username: superadmin password: YYYYYY


===== Ventrilo==

Verzija Ventrila koju ćemo instlirati je 2.1.2 jer novije verzije imaju ograničenja na broj korisnika koji se na njih može spojiti. Potražite datoteku ventrilo_srv-2.1.2-Linux-i386.tar.gz na internetu i prebacite ju na server. Zgodan program za prebacivanje datoteka na server je [[http://winscp.net/|WinSCP]].

Nakon što ste prebacili datoteku kreirajte direktorij u u kojem želite snimiti Ventrilo, npr. /home/ventrilo i rapskirajte datoteku:

  mkdir /opt/ventrilo 
  adduser --home /opt/ventrilo --disabled-login --disabled-password --no-create-home ventrilo
  mv ventrilo_srv-2.1.2-Linux-i386.tar.gz /opt/ventrilo/
  cd /opt/ventrilo
  tar -xvzzf ventrilo_srv-2.1.2-Linux-i386.tar.gz
  rm ventrilo_srv-2.1.2-Linux-i386.tar.gz
  chown ventrilo:ventrilo -R /opt/ventrilo

Nakon raspakiravanja vrijeme je da podesite server editirajući datoteku ventrilo_srv.ini

  nano /opt/ventrilo/ventrilo_srv.ini

Podesite ime servera i admin password.



==== Automatsko pokretanje===

Kreirajmo init skriptu:

  nano /etc/init.d/ventrilo

<code bash>#! /bin/sh
VENPATH=/opt/ventrilo
VENBIN=$VENPATH/ventrilo_srv
test -x $DAEMON || exit 0
case "$1" in
start)
echo "Starting Ventrilo Server"
su ventrilo -c "$VENBIN -f$VENPATH/ventrilo_srv -d"
echo -n "Setting priority: "
renice -5 -u ventrilo
echo "Done."
;;
stop)
echo -n "Stopping all Ventrilo Servers"
killall ventrilo_srv
echo ". Done."
;;
reload)
echo "Not implemented."
;;
force-reload|restart)
sh $0 stop
sleep 5
sh $0 start
;;
  * )
echo "Usage: /etc/init.d/ventrilo {start|stop|restart|force-reload|reload}"
exit 1
;;
esac
exit 0</code>

  chmod +x /etc/init.d/ventrilo

  update-rc.d ventrilo defaults

==== Chroot jail===

Upute za pokretanje Ventrila u chroot okruženju potražite na:

  *  http://pelme.se/%7Eandreas/code/ventrilo-chroot/
  *  http://www.howtoforge.com/ventrilo_voice_communication_server_ubuntu_feisty_amd64

===== VoIP (OpenSER)==

OpenSER je SIP (Session Initiation Protocol) proxy server. Ukratko to znači da pomoću njega možete uspostavljati pozive koristeći softver koji se zna služiti SIP-om, kao npr. Eyebeam - http://www.counterpath.com/eyebeam.html .

  apt-get install openser

Nakon istalacije editirajte datoteku **/etc/default/openser**:

  nano /etc/default/openser

Promijenite liniju

  RUN_OPENSER=no

u

  RUN_OPENSER=yes

Editirajte datoteku /etc/openser/openser.cfg i dodajte liniju

  alias=voip.savica.net

Domenu naravno zamijenite svojom. Zadnji korak je i da upalimo OpenSER:

  invoke-rc.d openser start

Trebali bi vidjeti ovako nešto:

<code>grunf:~# invoke-rc.d openser start
Starting openser: openserListening on
             udp: 127.0.0.1 [[127.0.0.1]]:5060
             udp: 10.29.5.80 [[10.29.5.80]]:5060
             tcp: 127.0.0.1 [[127.0.0.1]]:5060
             tcp: 10.29.5.80 [[10.29.5.80]]:5060
Aliases:
             tcp: grunf.savica.net:5060
             tcp: grunf.savica.net.savica.net:5060
             tcp: localhost:5060
             udp: grunf.savica.net:5060
             udp: grunf.savica.net.savica.net:5060
             udp: localhost:5060
             *: voip.savica.net:*</code>


Pomoću utility-a **openserctl** možete vidjeti trenutno spojene korisnike:

  grunf:~# openserctl online
  WARINIG: no database engine found - tried //
  'gog'

Warning možete slobodno zanemariti, on se pojavljuje samo zato što OpenSER ima i MySQL modul koji omogućuje pohranjivanje korisnika u bazu, njihovu autorizaciju, registriranje i sl.

===== Windows File Sharing (Samba)==

Samba je dostupna kao paket u repozitoriju, stoga je instaliravamo sa:

  apt-get install samba

Kada se prilikom instalacije pojavi pitanje:

<code>Please specify the workgroup you want this server to appear to be in
when queried by clients. Note that this parameter also controls the domain
name used with the security=domain setting.

Workgroup/Domain Name:</code>

upišite **WORKGROUP**, ili koju već Workgroup koristite na svom Windows računalu.

Na pitanje:

<code>If your computer gets IP address information from a DHCP server on the
network, the DHCP server may also provide information about WINS servers 
("NetBIOS name â servers") present on the network. This requires a change
to your smb.conf file so that DHCP-provided WINS settings will automatically
be read from /etc/samba/dhcp.conf.

The dhcp3-client package must be installed to take advantage of this feature.

Modify smb.conf to use WINS settings from DHCP?</code>

Odgovorite sa **NO**.



==== Privatni korisnički folderi===

Editirajte konfiguracijsku datoteku **/etc/samba/smb.conf**:

  nano /etc/samba/smb.conf

Otkomentirajte liniju **security = user** kako bi samo korisnici koji imaju korisnički račun na serveru mogli pristupiti share-u.

Potražite dio koji počinje sa **[homes]**. Ispod njega se nalazi linija **writable = no** koju treba promijeniti u **writable = yes** kako bi korisnici imali write privilegije u svom direktoriju.

Nakon podešavana vrijeme je za restart Samba servisa:

  invoke-rc.d samba restart

Prilikom instalacije Debiana sam osim root korisnika morao kreirati još jednog korisnika, u mom slučaju taj se korisnik zove **gog**. Kako bi on imao dozvolu pristupa svom korisničkom direktoriju moramo mu dodati grupu **users**.

  usermod -a -G users gog

Korisnike koji još uvijek ne postoje na sistemu treba kreirati te dodati ih u grupu users:

  useradd koriscnicko_ime -m -G users

Nakon što smo kreirali sve korisnike, potrebno im je dodijeliti lozinke za pristup share-u.

  smbpasswd -a korisnicko_ime

Korisnik svom share-u pristupa sa Start->Run... \\ip-adresa-servera\ [enter]. Nakon čega mora unijeti svoje korisničko ime i lozinku koju smo mu dodijelili pomoću naredbe **smbpasswd**. Nakon autentifikacije vidjet će svoj folder, sve što tamo snimi nalazi se na server u **/home/korisnicko_ime/**.


==== Zajednički folder===

Ideja je kreirati zajednički folder u koji će svi korisnici koji imaju korisnički računa na serveru moći pisati i brisati. Neka se folder u ovom primjeru zove **dokumenti**, a pokazivat će na **/home/dokumenti/**.

  mkdir /home/dokumenti

Grupa koja je vlasnik direktorija zvat će se **users**, a privilegije pisanja u njega će imati svi korisnici koji pripadaju grupi **users**.

  chown root:users /home/dokumenti/
  chmod g=rwx /home/dokumenti/

Editirajmo ponovo **/etc/samba/smb.conf**:

  nano /etc/samba/smb.conf

i dodajmo na kraj:

<code>[[Dokumenti]]
        comment = Zajednicki dokumenti
        path = /home/dokumenti
        valid users = @users
        force group = users
        create mask = 0660
        directory mask = 0771
        writable = yes</code>

I za kraj nam ostaje samo još jednom resetirati Sambu:

  invoke-rc.d samba restart

Svaki korisnik koji se spoji na Windows share imat će pristup svom korisničkom folderu (ostali korisnici ne vide tuđe korisničke direktorije) i zajedničkom folderu imena **Dokumenti**.

===== DC file sharing (microdc2)==

Ukoliko želite svoj server iskoristiti i kao file server koji će biti spojen na DC hub, a ne želite instaliravati grafičko sučelje potreban vam je **[[http://corsair626.no-ip.org/microdc/|microdc2]]**. Microdc2 je fork microdc-a koji se više ne razvija, a podržava i TTH. Nedostatak podrške za TTH je razlog zašto ne možemo koristiti **dctc** koji se nalazi u Debianovom repozitoriju. Još jedan od klijenata za spajanje na DC hub iz konzole je nanodc, no njega nisam uspio upogoniti.

Skinimo i raspakirajmo arhivu:

  wget http://corsair626.no-ip.org/microdc/microdc2-0.15.6.tar.gz
  tar -xvzzf microdc2-0.15.6.tar.gz
  cd microdc2-0.15.6

Prije kompajliranja potrebno je instalirati i dvije biblioteke:

  apt-get install libxml2-dev libncurses5-dev

Skompalirajmo microdc2:

  ./configure
  make
  make install

Ukoliko ste negdje zapeli prilikom kompajliranja probajte instalirati i paket **libreadline5-dev** i pokušajte ponovo.

Sada možemo pokrenuti microdc2:

  microdc2

Nakon što se microdc2 upali upišite **share /putanja-do-shareanog-direktorija** i sačekajte dok microdc2 ne završi sa hashiranjem vaših podataka. To može i potrajati, a što se trenutno dešava možete provjeriti upisivanjem naredbe **status** ili možete baciti oko na zauzeće procesora uz pomoć naredbe **top** (ali u drugom prozoru, ne u prozoru u kojem vam je pokrenut microdc2). Kada hashiranje završi izađite iz programa naredbom **exit**.

Sad ćemo kreirati konfiguracijsku datoteku, ukoliko ste spojeni kako **root**:

  nano /root/.microdc2/config

U nju unesite:

  set nick vas-nick
  set description [[WiFiHR-|10.14.X.X]]
  set active on
  set listenaddr ip-adresa-vaseg-servera
  set auto_reconnect on
  set speed LAN(T3)
  set slots 20
  set email vasa-email-adresa
  connect adresa-huba-na-koji-se-spajate
  set logfile /var/log/microdc2

I konačno se možete spojiti na hub tako da pokrene ponovo microdc2 nakon čega bi se on automatski trebao spojiti.

Nažalost, microdc2 se ne možete vrtiti kao daemon, niti se pokrenuti u pozadini. Tako da ćemo se poslužiti programom **screen**.

  apt-get install screen

  screen
  microdc2

Zatim pritisnite <Ctrl>+A i zatim **d**, što će //detachati// prozor u kojem je pokrenut microdc2. Ukoliko se želite vratiti unesite **screen -ls**:

  grunf:~# screen -ls
  There is a screen on:
         32668.pts-1.grunf      (Detached)
  1 Socket in /var/run/screen/S-root.

Kao što vidite postoji //prozor// **32668.pts-1.grunf**, da bi se na njega spojili unesimo:

  screen -r 32668.pts-1.grunf

Pročitajte više o naredbi [[http://www.rackaid.com/resources/linux-tutorials/general-tutorials/linux-screen.cfm|screen]]

===== DynDNS==

Ukoliko imate korisnički računa na DynDNS-u i želite update-ati svoju public IP adresu pomoću Linux servera treba će vam **ddclient**.

 apt-get install ddclient

Važno je odabrati da želite da se ddclient vrti kao **daemon**, kao i update interval, ove postavke će biti pohranjene u datoteci **/etc/default/ddclient**. Na pitanje o tome koji interface želite koristiti samo pritisnite <enter>.

Kada se ulogirate na stranice DynDNS-a sa svojim korisnički podacima možete si i izgenerirati skriptu za ddclient, koju ćete morati staviti u /etc/ddclient.conf i nako toga resetirati servis.

 nano /etc/ddclient.conf

<code># Configuration file for ddclient generated by debconf
  - 
  -  /etc/ddclient.conf

pid=/var/run/ddclient.pid

  -  ddclient configuration file
daemon=600                   # check every 600 seconds
syslog=yes                   # log update msgs to syslog
mail-failure=vasemail@domena # Mail failed updates to user

  -  Detect IP with our CheckIP server
use=web, web=checkip.dyndns.com/, web-skip='IP Address'

  -  DynDNS username and password here
login=vase-korisnicko-ime-na-dyndnsu
password=password-vaseg-dyndns-korisnickog-racuna

  -  Default options
protocol=dyndns2
server=members.dyndns.org

  -  Dynamic DNS hosts
vasa-domena-na-dyndnsu.dyndns.org</code>

Resetirajmo ddclient servis:

  invoke-rc.d ddclient restart

Da bi provjerili radi li ddclient u pozadini, kao što od njega i očekujemo:

<code>grunf:~# ps aux | grep dd
root      8120  0.0  2.2   7312  4340 ?        S    21:43   0:00 ddclient - sleeping for 180 seconds
root      8179  0.0  0.3   2852   700 pts/1    R+   21:55   0:00 grep dd</code>

Kao što vidimo, ddclient daemon trenutačno čeka još 180 sekundi do slijedeće provjere IP adrese.

**ddclient** provjerava IP adresu pohranjenu u **/var/cache/ddclient/ddclient.cache** kao i adresu koju mu dojavljuje stranica http://checkip.dyndns.com/ . Ukoliko se te dvije adrese razlikuju ddclient će poslati vašu novu IP adresu DynDNS serveru.

U **/var/log/syslog** će se pojaviti zapis o slanju IP adrese samo u trenutku kada se vaša vanjska IP adresa i adresa pohranjena u cache datoteci razlikuju. Iako se može natjerati ddclient da forsira slanje IP adrese svaki put, to vam ne bih proporučio jer DynDNS zaključava korisničke račune koji prečesto forsiraju nepotrebno mijenjanje IP adrese.
